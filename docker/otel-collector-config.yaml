receivers:
  syslog:
    tcp:
      listen_address: "0.0.0.0:54527"
    protocol: rfc3164
    location: UTC
    operators:
      - type: move
        from: attributes.message
        to: body
  fluentforward:
    endpoint: 0.0.0.0:24224
  otlp:
    protocols:
      grpc:
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 5s
          static_configs:
            - targets: ['0.0.0.0:8888']
exporters:
  logging:
    loglevel: info
    sampling_initial: 10
    sampling_thereafter: 50
  prometheusremotewrite:
    endpoint: http://mimir:9009/api/v1/push
    resource_to_telemetry_conversion:
      enabled: true
  otlp:
    endpoint: tempo:4317
    tls:
      insecure: true
  loki:
    format: json
    endpoint: "http://loki:3100/loki/api/v1/push"
    sending_queue:
      # Enabled indicates whether to not enqueue batches before sending to the consumerSender.
      enabled: false
      # NumConsumers is the number of consumers from the queue.
      num_consumers: 100
      # QueueSize is the maximum number of batches allowed in queue at a given time.
      queue_size: 10000

processors:
  attributes:
    actions:
      - action: insert
        key: loki.attribute.labels
        value: level

  resource:
    attributes:
      - action: upsert
        key: namespace
        value: "demo" # <<<<< REPLACE
      - action: upsert
        key: license
        value: 'com' # <<<<< REPLACE
      - action: upsert
        key: deployment_environment
        value: 'dev' # <<<<< REPLACE
      - action: insert
        key: loki.format
        value: logfmt
      - action: insert
        key: loki.resource.labels
        value: service, namespace, license, deployment_environment

  transform:
    log_statements:
      - context: resource
        statements:
          - replace_all_patterns(attributes, "key", "\\.", "_")
      - context: log
        statements:
          #          - delete_key(attributes, "log.file.path")
          #- replace_all_patterns(attributes, "key", "\\.", "_")
  batch:
    send_batch_size: 150
    timeout: 15s
  # Enabling the memory_limiter is strongly recommended for every pipeline.
  # Configuration is based on the amount of memory allocated to the collector.
  # The configuration below assumes 2GB of memory. In general, the ballast
  # should be set to 1/3 of the collector's memory, the limit should be 90% of
  # the collector's memory up to 2GB, and the spike should be 25% of the
  # collector's memory up to 2GB. In addition, the "--mem-ballast-size-mib" CLI
  # flag must be set to the same value as the "ballast_size_mib". For more
  # information, see
  # https://github.com/open-telemetry/opentelemetry-collector/blob/main/processor/memorylimiterprocessor/README.md
  memory_limiter:
    #ballast_size_mib: 683
    check_interval: 2s
    limit_mib: 1800
    spike_limit_mib: 500

extensions:
  health_check:
  pprof:
    endpoint: :1888
  zpages:
    endpoint: :55679

service:
  extensions: [ pprof, zpages, health_check ]
  pipelines:
    traces:
      receivers: [ otlp ]
      processors: [ batch ]
      exporters: [ logging, otlp ]
    metrics:
      receivers: [ prometheus, otlp ]
      processors: [ batch ]
      exporters: [ logging, prometheusremotewrite]
    logs:
      receivers: [ syslog, fluentforward, otlp ]
      processors: [  attributes, resource, memory_limiter, batch ]
      exporters: [ logging, loki ]
