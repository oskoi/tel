receivers:
  otlp:
    protocols:
      grpc:
        max_recv_msg_size_mib: 8 # for collector it would be better get 4
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 5s
          honor_labels: true
          static_configs:
            - targets: ['0.0.0.0:8888']
              labels:
                domain: XXXXXXXXXX
exporters:
  logging:
    loglevel: info
    sampling_initial: 10
    sampling_thereafter: 50
  prometheusremotewrite:
    endpoint: http://mimir:9009/api/v1/push
    remote_write_queue:
      enabled: true
      num_consumers: 30
    retry_on_failure:
      enabled: false
    resource_to_telemetry_conversion:
      enabled: true
  otlp/tempo:
    compression: snappy
    endpoint: tempo:4317
    sending_queue:
      enabled: true
      num_consumers: 30
    retry_on_failure:
      enabled: false
    tls:
      insecure: true
  loki:
    endpoint: "http://loki:3100/loki/api/v1/push"
    retry_on_failure:
      enabled: false
    sending_queue:
      # Enabled indicates whether to not enqueue batches before sending to the consumerSender.
      enabled: false
      # NumConsumers is the number of consumers from the queue.
      num_consumers: 30
      # QueueSize is the maximum number of batches allowed in queue at a given time.
      queue_size: 10000

processors:
  attributes/loki:
    actions:
      - action: insert
        key: loki.attribute.labels
        value: level
  resource/loki:
    attributes:
      - action: insert
        key: loki.format
        value: logfmt
      - action: insert
        key: loki.resource.labels
        value: service, namespace, license, deployment_environment

  batch:
    send_batch_max_size: 500
    send_batch_size: 300
    timeout: 500ms
  memory_limiter:
    check_interval: 2s
    limit_mib: 2000
    spike_limit_mib: 200
  resource:
    attributes:
      - action: upsert
        key: namespace
        value: "DEMO"
      - action: upsert
        key: license
        value: "com"
      - action: upsert
        key: deployment_environment
        value: "dev"
      - action: delete
        key: http.scheme
      - action: delete
        key: net.host.port
      - action: upsert
        from_attribute: host.name
        key: host
  resource/tempo:
    attributes:
      - action: insert
        from_attribute: service
        key: service.name
      - action: delete
        key: service
  transform:
# Loki not supported key with dot, resently we use this transformation - but not new loki export module use control
# commands with dots and they not work because of this
#
# So, dont use this transformation or you break loki.attribute.labels, loki.resource.labels features
#
#    log_statements:
#      - context: resource
#        statements:
#          - replace_all_patterns(attributes, "key", "\\.", "_")
#      - context: log
#        statements:
#          - replace_all_patterns(attributes, "key", "\\.", "_")
#    metric_statements:
#      - context: resource
#        statements:
#          - set(attributes["job"], attributes["service.name"])

extensions:
  health_check:
  pprof:
    endpoint: :1888
  zpages:
    endpoint: :55679

service:
  extensions: [ pprof, zpages, health_check ]
  pipelines:
    traces:
      receivers: [ otlp ]
      processors: [resource, resource/tempo, memory_limiter, batch]
      exporters: [ logging, otlp/tempo ]
    metrics:
      receivers: [ prometheus, otlp ]
      processors: [resource, transform, memory_limiter, batch]
      exporters: [ logging, prometheusremotewrite]
    logs:
      receivers: [  otlp ]
      processors: [resource, attributes/loki, resource/loki, transform, memory_limiter, batch]
      exporters: [ logging, loki ]
